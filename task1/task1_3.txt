
/* Standard includes. */
#include <stdlib.h>
#include <stdio.h>

/* Scheduler includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "lpc21xx.h"

/* Peripheral includes. */
#include "serial.h"
#include "GPIO.h"


/*-----------------------------------------------------------*/

/* Constants to setup I/O and processor. */
#define mainBUS_CLK_FULL	( ( unsigned char ) 0x01 )

/* Constants for the ComTest demo application tasks. */
#define mainCOM_TEST_BAUD_RATE	( ( unsigned long ) 115200 )
#define PRESSED  1
#define RELEASED 0

#define STATE1 0
#define STATE2 1
#define STATE3 3

/*
 * Configure the processor for use with the Keil demo board.  This is very
 * minimal as most of the setup is managed by the settings in the project
 * file.
 */
static void prvSetupHardware( void );
/*-----------------------------------------------------------*/
pinState_t Button=0;
uint16_t timer_counter=0;
uint16_t flag=0;
uint16_t state=STATE1;
/* Task to be created. */

void BUTTON_Task1( void * pvParameters )
{
    for( ;; )
    {
        Button=GPIO_read(PORT_0,PIN0);
			  
			if(Button==PRESSED){
			flag=1;
			timer_counter++;
		}
			else if(Button==RELEASED){
				if(	flag==1){
					flag=0;
					if(timer_counter<2)state=STATE1;
					else if(timer_counter>2&&timer_counter<4)state=STATE2;
					else if(timer_counter>4)state=STATE3;
				}
			}
			vTaskDelay(100);//1sec
    }
		
		
}
void LED_Task2( void * pvParameters )
{
	uint16_t led;
    for( ;; )
    {
			 if(state==STATE1) GPIO_write(PORT_0,PIN1,PIN_IS_LOW);
       else if(state==STATE2){
				 GPIO_write(PORT_0,PIN1,PIN_IS_HIGH);
				  vTaskDelay(100);//1sec
				  GPIO_write(PORT_0,PIN1,PIN_IS_LOW);
				  vTaskDelay(100);//1sec
			 }
			 else if(state==STATE3)  GPIO_write(PORT_0,PIN1,PIN_IS_HIGH);
				  vTaskDelay(400);//1sec
				  GPIO_write(PORT_0,PIN1,PIN_IS_LOW);
				  vTaskDelay(400);//1sec
			
		
			  vTaskDelay(100);//1sec
    }
}

TaskHandle_t BUTTON_Task1_Handler = NULL;

TaskHandle_t LED_Task2_Handler = NULL;

	

int main( void )
{
	/* Setup the hardware for use with the Keil demo board. */
	prvSetupHardware();

	
    /* Create Tasks here */
 xTaskCreate(
                   BUTTON_Task1,       /* Function that implements the task. */
                    "NAME1",          /* Text name for the task. */
                    100,      /* Stack size in words, not bytes. */
                    ( void * ) 0,    /* Parameter passed into the task. */
                    1,/* Priority at which the task is created. */
                    &BUTTON_Task1_Handler );      
 xTaskCreate(
                    LED_Task2,       /* Function that implements the task. */
                    "NAME2",          /* Text name for the task. */
                    100,      /* Stack size in words, not bytes. */
                    ( void * ) 0,    /* Parameter passed into the task. */
                    1,/* Priority at which the task is created. */
                    &LED_Task2_Handler );      


										
										
										
										
										
										
										
										
	vTaskStartScheduler();

	/* Should never reach here!  If you do then there was not enough heap
	available for the idle task to be created. */
	for( ;; );
}
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
	/* Perform the hardware setup required.  This is minimal as most of the
	setup is managed by the settings in the project file. */

	/* Configure UART */
	xSerialPortInitMinimal(mainCOM_TEST_BAUD_RATE);

	/* Configure GPIO */
	GPIO_init();

	/* Setup the peripheral bus to be the same as the PLL output. */
	VPBDIV = mainBUS_CLK_FULL;
}
/*-----------------------------------------------------------*/


